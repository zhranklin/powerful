{"version":3,"sources":["MyArrayLayout.tsx","App.tsx","registerServiceWorker.js","Rating.tsx","RatingControl.tsx","ratingControlTester.js","index.tsx"],"names":["MyMaterialArrayLayout","isExpanded","index","MaterialArrayLayout","tester","rankWith","isObjectArrayWithNesting","renderer","withJsonFormsArrayLayoutProps","visible","enabled","id","uischema","schema","label","rootSchema","renderers","data","path","errors","addItem","addItemCb","useCallback","p","value","Hidden","xsUp","styles","createStyles","container","padding","title","textAlign","dataContent","display","justifyContent","borderRadius","backgroundColor","demoform","margin","trace","init","withStyles","store","classes","useState","displayDataAsString","setDisplayDataAsString","standaloneData","setStandaloneData","displayResultAsString","setDisplayResultAsString","cases","setCases","yamlStr","setYamlStr","yamlTextFocused","setYamlTextFocused","$","url","success","data1","console","log","useEffect","updateStringData","stringData","JSON","stringify","get","getState","getDataAsStringFromStore","subscribe","yaml","Grid","justify","spacing","className","item","sm","Typography","variant","List","dense","map","i","ListItem","button","onClick","event","name","method","parse","ListItemText","primary","Button","color","window","json","dataType","contentType","error","jqXHR","responseText","submit","materialRenderers","MyArrayLayout","cells","materialCells","onChange","TextField","multiline","rows","content","obj","nul","indexOf","editYaml","target","onFocus","onBlur","fullWidth","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","Rating","props","rating","hoverAt","idx","this","setState","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","handleClick","key","React","getDerivedStateFromProps","nextProps","prevState","withJsonFormsControlProps","handleChange","ev","Number","scopeEndsWith","initState","jsonforms","rootReducer","combineReducers","jsonformsReducer","createStore","devToolsEnhancer","dispatch","Actions","description","done","recurrence","registerRenderer","ratingControlTester","RatingControl","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7628c380.chunk.js","sourcesContent":["import * as React from 'react';\nimport {useCallback} from 'react';\n\n\nimport {ArrayLayoutProps, isObjectArrayWithNesting, rankWith,} from '@jsonforms/core';\nimport {Hidden} from '@material-ui/core';\nimport {withJsonFormsArrayLayoutProps} from '@jsonforms/react';\nimport {MaterialArrayLayout} from \"@jsonforms/material-renderers/lib/layouts/MaterialArrayLayout\";\n\n\nexport class MyMaterialArrayLayout extends MaterialArrayLayout {\n  isExpanded = (index: number) => true;\n}\n\nexport const MyMaterialArrayLayoutRenderer =\n  ({ visible, enabled, id, uischema, schema, label, rootSchema, renderers, data, path, errors, addItem }: ArrayLayoutProps) => {\n    const addItemCb = useCallback((p: string, value: any) => addItem(p, value), [addItem]);\n    return (\n      <Hidden xsUp={!visible}>\n        <MyMaterialArrayLayout\n          label={label}\n          uischema={uischema}\n          schema={schema}\n          id={id}\n          rootSchema={rootSchema}\n          errors={errors}\n          enabled={enabled}\n          visible={visible}\n          data={data}\n          path={path}\n          addItem={addItemCb}\n          renderers={renderers}\n        />\n      </Hidden>\n    );\n  };\n\nexport default { tester: rankWith(5, isObjectArrayWithNesting), renderer: withJsonFormsArrayLayoutProps(MyMaterialArrayLayoutRenderer)};\n","import React, { Fragment, useState, useEffect, useCallback } from 'react';\nimport { JsonForms } from '@jsonforms/react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\nimport createStyles from '@material-ui/core/styles/createStyles';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport {\n  materialCells,\n  materialRenderers\n} from '@jsonforms/material-renderers';\nimport { Store } from 'redux';\nimport { get } from 'lodash';\nimport MyArrayLayout from \"./MyArrayLayout\";\nimport * as $ from \"jquery\"\nimport {ListItemText, TextField} from \"@material-ui/core\";\nimport * as yaml from 'js-yaml'\n\nconst styles = createStyles({\n  container: {\n    padding: '1em'\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em'\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    padding: '10px',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece'\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem'\n  }\n});\n\nexport interface AppProps extends WithStyles<typeof styles> {\n  store: Store;\n}\n\nconst data = {\n  trace: [{}]\n};\n\nconst getDataAsStringFromStore = (store: Store) =>\n  store\n    ? JSON.stringify(\n        get(store.getState(), ['jsonforms', 'core', 'data']),\n        null,\n        2\n      )\n    : '';\n\nvar init = false;\n\nconst App = ({ store, classes }: AppProps) => {\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [standaloneData, setStandaloneData] = useState(data);\n  const [displayResultAsString, setDisplayResultAsString] = useState('');\n  const [cases, setCases] = useState([\"1\", \"2\"]);\n  const [yamlStr, setYamlStr] = useState(\"\");\n  const [yamlTextFocused, setYamlTextFocused] = useState(false);\n\n  if (!init) {\n    $.ajax({\n      url: '/c',\n      success: data1 => {\n        console.log(data1);\n        setCases(data1)\n      }\n    });\n    init = true;\n  }\n  useEffect(() => {\n    const updateStringData = () => {\n      const stringData = getDataAsStringFromStore(store);\n      setDisplayDataAsString(stringData);\n    };\n    store.subscribe(updateStringData);\n    updateStringData();\n  }, [store]);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(standaloneData, null, 2));\n  }, [standaloneData]);\n\n  useEffect(() => {\n    if (!yamlTextFocused) {\n      setYamlStr(yaml.dump(standaloneData))\n    }\n  }, [standaloneData]);\n\n  function getCase(name: string) {\n    $.ajax({\n      method: \"Post\",\n      url: \"/c/\" + name,\n      success: data1 => {\n        var data = JSON.parse(data1);\n        console.log(data);\n        setStandaloneData(data)\n      }\n    })\n  }\n  function submit() {\n    setDisplayResultAsString(\"loading...\");\n    window.console.log(displayDataAsString);\n    var json = JSON.parse(displayDataAsString);\n    var url = '/e';\n    var params = \"validate=true\";\n    if (params) {\n      url = url + \"?\" + params\n    }\n    $.ajax({\n      method: \"POST\",\n      url: url,\n      dataType: 'text',\n      data: JSON.stringify(json),\n      contentType: 'application/json',\n      success: data1 => {\n        setDisplayResultAsString(data1)\n      },\n      error: jqXHR => {\n        setDisplayResultAsString(jqXHR.responseText)\n      }\n    });\n  }\n  function editYaml(content: string) {\n    setYamlStr(content)\n    try {\n      var obj = yaml.load(content);\n      console.log(obj)\n      if (obj) {\n        var nul = obj.trace.indexOf(null);\n        if (nul === -1) {\n          setStandaloneData(obj)\n        } else {\n          obj.trace[nul] = {}\n        }\n      }\n    } catch {\n\n    }\n  }\n\n  return (\n    <Fragment>\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={2}>\n          <Typography variant=\"h6\" className={classes.title}>\n            Cases\n          </Typography>\n          <List dense={true} >\n            {cases.map(i => (\n              <ListItem button onClick={event => getCase(i)}>\n                <ListItemText primary={i} />\n              </ListItem>\n            ))}\n          </List>\n        </Grid>\n        <Grid item sm={5}>\n          <Grid\n            container\n            justify={'flex-end'}\n            spacing={1}\n            className={classes.container}\n          >\n              <Button\n                color=\"primary\"\n                onClick={() => submit()}\n              >Submit</Button>\n          </Grid>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={standaloneData}\n              renderers={[\n                ...materialRenderers,\n                //register custom renderer\n                MyArrayLayout\n              ]}\n              cells={materialCells}\n              onChange={({ errors, data }) => setStandaloneData(data)}\n            />\n          </div>\n        </Grid>\n        <Grid item sm={5}>\n          <Typography variant={'h6'} className={classes.title}>\n            Edit as yaml\n          </Typography>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"Multiline\"\n            multiline\n            rows=\"10\"\n            value={yamlStr}\n            onChange={event => editYaml(event.target.value)}\n            onFocus={event => setYamlTextFocused(true)}\n            onBlur={event => setYamlTextFocused(false)}\n            variant=\"outlined\"\n            fullWidth\n          />\n          <p></p>\n          <div className={classes.dataContent}>\n            <pre id='resultData'>{displayResultAsString}</pre>\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\n// TODO: typings\nexport class Rating extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      rating: props.value,\n      hoverAt: null\n    };\n  }\n\n  static getDerivedStateFromProps = (nextProps: any, prevState: any) => {\n    if (prevState.rating !== nextProps.value) {\n      return {\n        rating: nextProps.value,\n        hoverAt: prevState.hoverAt\n      };\n    }\n    return null;\n  };\n\n  handleMouseOver(idx: number) {\n    this.setState({\n      hoverAt: idx + 1\n    });\n  }\n\n  handleMouseOut() {\n    this.setState({\n      hoverAt: null\n    });\n  }\n\n  handleClick(idx: number) {\n    this.setState({\n      rating: idx + 1\n    });\n  }\n\n  render() {\n    const { onClick } = this.props;\n\n    return (\n      <div id='#/properties/rating'>\n        <p>Rating:</p>\n        {[0, 1, 2, 3, 4].map(i => {\n          const rating =\n            this.state.hoverAt != null ? this.state.hoverAt : this.state.rating;\n\n          return (\n            <span\n              onMouseOver={() => this.handleMouseOver(i)}\n              onMouseOut={() => this.handleMouseOut()}\n              onClick={() => {\n                this.handleClick(i);\n                onClick({ value: i + 1 });\n              }}\n              key={`${this.props.id}_${i}`}\n            >\n              {i < rating ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    onClick={(ev: any) => handleChange(path, Number(ev.value))}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { combineReducers, createStore, Reducer, AnyAction } from 'redux';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { Actions, jsonformsReducer, JsonFormsState } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\n// Setup Redux store\nconst data = {\n  name: 'Send email to Adrian',\n  description: 'Confirm if you have passed the subject\\nHereby ...',\n  done: true,\n  recurrence: 'Daily',\n  rating: 3\n};\n\nconst initState: JsonFormsState = {\n  jsonforms: {\n    cells: materialCells,\n    renderers: materialRenderers\n  }\n};\n\nconst rootReducer: Reducer<JsonFormsState, AnyAction> = combineReducers({\n  jsonforms: jsonformsReducer()\n});\nconst store = createStore(rootReducer, initState, devToolsEnhancer({}));\nstore.dispatch(Actions.init(data, schema, uischema));\n\n// Register custom renderer for the Redux tab\nstore.dispatch(Actions.registerRenderer(ratingControlTester, RatingControl));\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}