{"version":3,"sources":["MyArrayLayout.tsx","clipboard.ts","yaml.ts","data.ts","SaveTools.tsx","App.tsx","registerServiceWorker.js","index.tsx"],"names":["MyMaterialArrayLayout","isExpanded","index","MaterialArrayLayout","tester","rankWith","isObjectArrayWithNesting","renderer","withJsonFormsArrayLayoutProps","visible","enabled","id","uischema","schema","label","rootSchema","renderers","data","path","errors","addItem","addItemCb","useCallback","p","value","Hidden","xsUp","copyTextToClipboard","text","navigator","clipboard","writeText","then","console","log","err","error","textArea","document","createElement","style","position","body","appendChild","focus","select","msg","execCommand","removeChild","fallbackCopyTextToClipboard","yamlDumpOption","noArrayIndent","toYaml","yaml","fromYaml","str","viewToPost","display","JSON","parse","stringify","trace","forEach","tr","res","headers","queries","arrayToObj","validate","postToView","obj","filter","length","newObj","objToArray","undefined","result","k","push","name","kvs","h","scopedUri","uri","scope","key","vars","window","location","search","substring","split","i","pair","getQueryValue","splitter","indexOf","displayData","setDisplayString","cacheKey","useState","saveName","setSaveName","showCache","localStorage","getItem","Paper","component","padding","alignItems","InputBase","placeholder","onChange","e","target","IconButton","onClick","cache","cases","setItem","saveToCache","Divider","orientation","copyToClipboard","removeItem","styles","createStyles","container","title","textAlign","dataContent","justifyContent","borderRadius","backgroundColor","demoform","margin","init","withStyles","store","classes","setDisplayDataAsString","setDisplayData","consoleData","setConsoleData","setCases","yamlStr","setYamlStr","yamlTextFocused","setYamlTextFocused","submit","setResult","json","params","url","$","method","dataType","contentType","success","data1","jqXHR","responseText","executeCase","expect","useEffect","updateStringData","stringData","get","getState","getDataAsStringFromStore","subscribe","Grid","justify","spacing","className","item","sm","Typography","variant","List","dense","map","grp","ListItem","button","ListItemText","primary","group","c","event","Button","color","materialRenderers","MyArrayLayout","cells","materialCells","traceNodeTmpl","SaveTools","TextField","multiline","rows","content","nul","editYaml","onFocus","onBlur","fullWidth","Boolean","hostname","match","initState","jsonforms","rootReducer","combineReducers","jsonformsReducer","createStore","devToolsEnhancer","dispatch","Actions","description","done","recurrence","rating","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"0/EAUaA,EAAqB,iKACI,OADJ,oCAChCC,WAAa,SAACC,GAAa,OAAK,GAAI,wBADJ,C,OAASC,qBA2B5B,GAAEC,OAAQC,mBAAS,EAAGC,4BAA2BC,SAAUC,yCAtBxE,SADwC,GACsF,IAA3HC,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAASC,EAAE,EAAFA,GAAIC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAS,EAATA,UAAWC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACrFC,EAAYC,uBAAY,SAACC,EAAWC,GAAU,OAAKJ,EAAQG,EAAGC,KAAQ,CAACJ,IAC7E,OACE,gBAACK,EAAA,EAAM,CAACC,MAAOjB,GACb,gBAAC,EAAqB,CACpBK,MAAOA,EACPF,SAAUA,EACVC,OAAQA,EACRF,GAAIA,EACJI,WAAYA,EACZI,OAAQA,EACRT,QAASA,EACTD,QAASA,EACTQ,KAAMA,EACNC,KAAMA,EACNE,QAASC,EACTL,UAAWA,S,2BCbd,SAASW,EAAoBC,GAC7BC,UAAUC,UAIfD,UAAUC,UAAUC,UAAUH,GAAMI,MAAK,WACvCC,QAAQC,IAAI,kDACX,SAASC,GACVF,QAAQG,MAAM,+BAAgCD,MA1Bd,SAASP,GAC3C,IAAIS,EAAWC,SAASC,cAAc,YACtCF,EAASb,MAAQI,EACjBS,EAASG,MAAMC,SAAS,QACxBH,SAASI,KAAKC,YAAYN,GAC1BA,EAASO,QACTP,EAASQ,SAET,IACE,IACIC,EADaR,SAASS,YAAY,QACf,aAAe,eACtCd,QAAQC,IAAI,sCAAwCY,GACpD,MAAOX,GACPF,QAAQG,MAAM,iCAAkCD,GAGlDG,SAASI,KAAKM,YAAYX,GAIxBY,CAA4BrB,G,yHCjB1BsB,EAA8B,CAClCC,eAAe,GAEV,SAASC,EAAOnC,GACrB,OAAOoC,OAAUpC,EAAMiC,GAElB,SAASI,EAASC,GACvB,OAAOF,OAAUE,GCTZ,SAASC,EAAWC,GACzB,IAAIxC,EAAOyC,KAAKC,MAAMD,KAAKE,UAAUH,IAoBrC,OAnBAxC,EAAK4C,MAAMC,SAAQ,SAACC,GAClB,IAWMC,EAXFC,EAAUF,EAAGE,QACbC,EAAUH,EAAGG,gBACVH,EAAGE,eACHF,EAAGG,QACND,MACED,EAAMG,GAAWF,MAEnBF,EAAGE,QAAUD,IAGbE,KACEF,EAAMG,GAAWD,MAEnBH,EAAGG,QAAUF,cAIZ/C,EAAKmD,SACLnD,EAGF,SAASoD,EAAWC,GACzB,GAAIA,EAAIT,MAAMU,QAAO,SAACR,GAAO,OAAKA,EAAGE,SAAWF,EAAGG,WAASM,OAAS,EAAG,CACtE,IAAIC,EAASf,KAAKC,MAAMD,KAAKE,UAAUU,IAKvC,OAJAG,EAAOZ,MAAMC,SAAQ,SAACC,GACpBA,EAAGE,QAAUS,EAAWX,EAAGE,SAC3BF,EAAGG,QAAUQ,EAAWX,EAAGG,YAEtBO,EAEP,OAAOH,EAIX,SAASI,EAAWJ,GAClB,QAAYK,IAARL,EAAJ,CAGA,IAAIM,EAAS,GACb,IAAK,IAAIC,KAAKP,EACZM,EAAOE,KAAK,CAACC,KAAMF,EAAGrD,MAAO8C,EAAIO,KAEnC,OAAOD,EAAOJ,OAAS,EAAII,OAASD,GAGtC,SAASR,GAAWa,GAClB,IAAIJ,EAAc,GAMlB,IAAK,IAAIC,KALTG,EAAIlB,SAAQ,SAAAmB,GACNA,EAAEF,MAAQE,EAAEzD,OAASyD,EAAEzD,MAAMgD,OAAS,IACxCI,EAAOK,EAAEF,MAAQE,EAAEzD,UAGToD,EACZ,OAAOA,EAsCJ,SAASM,GAAUC,GACxB,IAAMC,EAdR,SAAuBC,GAGrB,IAFA,IACMC,EADQC,OAAOC,SAASC,OAAOC,UAAU,GAC5BC,MAAM,KAChBC,EAAE,EAAGA,EAAEN,EAAKd,OAAQoB,IAAK,CAChC,IAAMC,EAAOP,EAAKM,GAAGD,MAAM,KAC3B,GAAGE,EAAK,IAAMR,EACZ,OAAOQ,EAAK,IAQFC,CAAc,SAC5B,QAAanB,GAATS,EACF,OAAOD,EAEP,IAAMY,GAAgC,GAArBZ,EAAIa,QAAQ,KAAa,IAAM,IAChD,OAAOb,EAAMY,EAAW,SAAWX,ECvFxB,mBAAwD,IAArDa,EAAW,EAAXA,YAAaC,EAAgB,EAAhBA,iBACvBC,EAAW,iBACjB,EAAgCC,mBAAS,IAAG,mBAArCC,EAAQ,KAAEC,EAAW,KAc5B,SAASC,IACP,IAAIhD,EAAMiD,aAAaC,QAAQN,GAC/BD,EAAwB,MAAP3C,EAAc,GAAKA,GAgBtC,OA/BAtB,QAAQC,IAAI+D,GA+BL,kBAACS,EAAA,EAAK,CAACC,UAAU,OAAOnE,MAAO,CAACoE,QAAS,UAAWnD,QAAS,OAAQoD,WAAY,WACtF,kBAACC,EAAA,EAAS,CACRtE,MAAO,CAACoE,QAAS,QACjBG,YAAY,iBACZvF,MAAO6E,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAYW,EAAEC,OAAO1F,UAEtC,kBAAC2F,EAAA,EAAU,CAACC,QAAS,kBApCvB,SAAqBrC,GACnB,GAAKA,GAAiB,KAATA,EAAb,CAGA,IAAIsC,EAAQb,aAAaC,QAAQN,GAC7BlF,EAAqB,MAAToG,EAAgB,CAACC,MAAO,IAAMhE,EAAS+D,GACvDpG,EAAKqG,MAAMvC,GAAQvB,EAAWyC,GAC9BO,aAAae,QAAQpB,EAAU/C,EAAOnC,IACtCsF,KA4B2BiB,CAAYnB,KACrC,kBAAC,IAAQ,OAEX,kBAACoB,EAAA,EAAO,CAACC,YAAY,aACrB,kBAACP,EAAA,EAAU,CAACC,QAAS,kBAAMb,MACzB,kBAAC,IAAc,OAEjB,kBAACkB,EAAA,EAAO,CAACC,YAAY,aACrB,kBAACP,EAAA,EAAU,CAACC,QAAS,kBA5BvB,WACE,IAAInG,EAAOuF,aAAaC,QAAQN,GACpB,MAARlF,GACFU,EAAoBV,GAEtBiF,EAAiB,qCAuBUyB,KACzB,kBAAC,IAAY,OAEf,kBAACF,EAAA,EAAO,CAACC,YAAY,aACrB,kBAACP,EAAA,EAAU,CAACC,QAAS,kBAvBrBZ,aAAaoB,WAAWzB,QACxBI,MAuBE,kBAAC,IAAS,SC9CVsB,GAASC,IAAa,CAC1BC,UAAW,CACTnB,QAAS,OAEXoB,MAAO,CACLC,UAAW,SACXrB,QAAS,UAEXsB,YAAa,CACXzE,QAAS,OACT0E,eAAgB,aAChBvB,QAAS,OACTwB,aAAc,SACdC,gBAAiB,WAEnBC,SAAU,CACRC,OAAQ,OACR3B,QAAS,UAiBT4B,IAAO,EA4KIC,OAAWZ,GAAXY,EA1KH,SAAH,GAAsC,IAAhCC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QACpB,EAAsDvC,mBAAS,IAAG,mBAAtCwC,GAAF,KAAwB,MAClD,EAAsCxC,mBAAc,CAAEvC,MAAO,CAAC,MAAM,mBAA7DoC,EAAW,KAAE4C,EAAc,KAClC,EAAsCzC,mBAAS,IAAG,mBAA3C0C,EAAW,KAAEC,EAAc,KAClC,EAA0B3C,mBAAS,CAAC,CAAC,MAAS,OAAQ,MAAS,CAAC,IAAK,QAAO,mBAArEkB,EAAK,KAAE0B,EAAQ,KACtB,EAA8B5C,mBAAS,IAAG,mBAAnC6C,EAAO,KAAEC,EAAU,KAC1B,EAA8C9C,oBAAS,GAAM,mBAAtD+C,EAAe,KAAEC,EAAkB,KA2C1C,SAASC,EAAOC,GACdA,EAAU,cACV/D,OAAOtD,QAAQC,IAAI+G,GF/ChB,SAAqBM,EAAWC,EAA4BF,GACjE,IAAIG,EAAM,KACND,IACFC,EAAMA,EAAM,IAAMD,GAEpBE,OAAO,CACLC,OAAQ,OACRF,IAAKvE,GAAUuE,GACfG,SAAU,OACV3I,KAAMyC,KAAKE,UAAU2F,GACrBM,YAAa,mBACbC,QAAS,SAAAC,GACPT,EAAUS,IAEZ3H,MAAO,SAAA4H,GACLV,EAAUU,EAAMC,iBEmClBC,CAFW5G,EAAS2F,GAEFhD,EAAYkE,OAAS,qBAAkBxF,EAAW2E,GAmBtE,OAjEKd,KACHkB,OAAO,CACLD,IAAKvE,GAAU,aACf4E,QAAS,SAAAC,GACP9H,QAAQC,IAAI6H,GACZf,EAASe,MAGbvB,IAAO,GAET4B,qBAAU,WACR,IAAMC,EAAmB,WACvB,IAAMC,EA/BqB,SAAC5B,GAAY,OAC5CA,EACIhF,KAAKE,UACH2G,cAAI7B,EAAM8B,WAAY,CAAC,YAAa,OAAQ,SAC5C,KACA,GAEF,GAwBmBC,CAAyB/B,GAC5CE,EAAuB0B,IAEzB5B,EAAMgC,UAAUL,GAChBA,MACC,CAAC3B,IAEJ0B,qBAAU,WACRxB,EAAuBlF,KAAKE,UAAUqC,EAAa,KAAM,MACxD,CAACA,IAEJmE,qBAAU,WACHjB,GACHD,EAAW9F,EAAOI,EAAWyC,OAE9B,CAACA,IAuCF,kBAAC,WAAQ,KACP,kBAAC0E,EAAA,EAAI,CACH5C,WAAS,EACT6C,QAAS,SACTC,QAAS,EACTC,UAAWnC,EAAQZ,WAEnB,kBAAC4C,EAAA,EAAI,CAACI,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAU,CAACC,QAAQ,KAAKJ,UAAWnC,EAAQX,OAAM,SAGlD,kBAACmD,EAAA,EAAI,CAACC,OAAO,GACV9D,EAAM+D,KAAI,SAACC,GAAQ,OAClB,6BACE,kBAACC,EAAA,EAAQ,CAACT,UAAW,WAAYU,QAAM,GACrC,kBAACC,EAAA,EAAY,CAACC,QAASJ,EAAIK,SAE5BL,EAAIhE,MAAM+D,KAAI,SAACO,GAAS,OACvB,kBAACL,EAAA,EAAQ,CAACC,QAAM,EAACV,UAAW,cAAe1D,QAAS,SAAAyE,GAAK,OAvDxD9G,EAuDoE6G,OAtDnFlC,OAAO,CACLC,OAAQ,OACRF,IAAKvE,GAAU,MAAQH,GACvB+E,QAAS,SAAAC,GACP,IAAI9I,EAAOyC,KAAKC,MAAMoG,GACtB9H,QAAQC,IAAIjB,GACZ4H,EAAexE,EAAWpD,OAPhC,IAAiB8D,IAwDC,kBAAC0G,EAAA,EAAY,CAACX,UAAW,kBAAmBY,QAASE,cAOjE,kBAACjB,EAAA,EAAI,CAACI,MAAI,EAACC,GAAI,GACb,kBAACL,EAAA,EAAI,CACH5C,WAAS,EACT6C,QAAS,WACTC,QAAS,EACTC,UAAWnC,EAAQZ,WAEnB,kBAAC+D,EAAA,EAAM,CACLC,MAAM,UACNb,QAAQ,YACR9D,QAAS,kBAAMiC,EAAON,KAAgB,WAG1C,yBAAK+B,UAAWnC,EAAQL,UACtB,kBAAC,YAAS,CACRzH,OAAQA,EACRD,SAAUA,EACVK,KAAMgF,EACNjF,UAAS,sBACJgL,qBAAiB,CAEpBC,IAEFC,MAAOC,gBACPnF,SAAU,YAAQ,EAAN7F,OAAmB,IAAXF,EAAI,EAAJA,KACS,KAAvBA,EAAKmL,sBACAnL,EAAKmL,cAEdvD,EAAe5H,OAIrB,kBAAC0J,EAAA,EAAI,CACH5C,WAAS,EACT6C,QAAS,WACTC,QAAS,EACTC,UAAWnC,EAAQZ,WAEnB,kBAACsE,GAAS,CACRpG,YAAaA,EACbC,iBAAkB6C,MAIxB,kBAAC4B,EAAA,EAAI,CAACI,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAU,CAACC,QAAS,KAAMJ,UAAWnC,EAAQX,OAAM,gBAGpD,kBAACsE,EAAA,EAAS,CACR3L,GAAG,8BACHG,MAAM,YACNyL,WAAS,EACTC,KAAK,KACLhL,MAAOyH,EACPjC,SAAU,SAAA6E,GAAK,OAlGzB,SAAkBY,GAChBvD,EAAWuD,GACX,IACE,IAAInI,EAAMhB,EAASmJ,GACnB,GAAInI,EAAK,CACP,IAAIoI,EAAMpI,EAAIT,MAAMmC,QAAQ,OACf,IAAT0G,EACF7D,EAAexE,EAAWC,IAE1BA,EAAIT,MAAM6I,GAAO,IAGrB,WAsFyBC,CAASd,EAAM3E,OAAO1F,QACzCoL,QAAS,SAAAf,GAAK,OAAIzC,GAAmB,IACrCyD,OAAQ,SAAAhB,GAAK,OAAIzC,GAAmB,IACpC8B,QAAQ,WACR4B,WAAS,IAEX,4BACA,yBAAKhC,UAAWnC,EAAQT,aACtB,yBAAKvH,GAAG,cAAcmI,UClNdiE,QACW,cAA7BxH,OAAOC,SAASwH,UAEe,UAA7BzH,OAAOC,SAASwH,UAEhBzH,OAAOC,SAASwH,SAASC,MACvB,2D,uBCQAC,GAA4B,CAChCC,UAAW,CACTjB,MAAOC,gBACPnL,UAAWgL,sBAIToB,GAAkDC,2BAAgB,CACtEF,UAAWG,+BAEP5E,GAAQ6E,uBAAYH,GAAaF,GAAWM,4BAAiB,KACnE9E,GAAM+E,SAASC,UAAQlF,KAnBV,CACXzD,KAAM,uBACN4I,YAAa,qDACbC,MAAM,EACNC,WAAY,QACZC,OAAQ,GAcwBjN,EAAQD,IAE1CmN,IAASC,OAAO,kBAAC,GAAG,CAACtF,MAAOA,KAAWpG,SAAS2L,eAAe,SDiEzD,kBAAmBpM,WACrBA,UAAUqM,cAAcC,MAAMnM,MAAK,SAAAoM,GACjCA,EAAaC,kB","file":"static/js/main.5c669d3f.chunk.js","sourcesContent":["import * as React from 'react';\nimport {useCallback} from 'react';\n\n\nimport {ArrayLayoutProps, isObjectArrayWithNesting, rankWith,} from '@jsonforms/core';\nimport {Hidden} from '@material-ui/core';\nimport {withJsonFormsArrayLayoutProps} from '@jsonforms/react';\nimport {MaterialArrayLayout} from \"@jsonforms/material-renderers/lib/layouts/MaterialArrayLayout\";\n\n\nexport class MyMaterialArrayLayout extends MaterialArrayLayout {\n  isExpanded = (index: number) => true;\n}\n\nexport const MyMaterialArrayLayoutRenderer =\n  ({ visible, enabled, id, uischema, schema, label, rootSchema, renderers, data, path, errors, addItem }: ArrayLayoutProps) => {\n    const addItemCb = useCallback((p: string, value: any) => addItem(p, value), [addItem]);\n    return (\n      <Hidden xsUp={!visible}>\n        <MyMaterialArrayLayout\n          label={label}\n          uischema={uischema}\n          schema={schema}\n          id={id}\n          rootSchema={rootSchema}\n          errors={errors}\n          enabled={enabled}\n          visible={visible}\n          data={data}\n          path={path}\n          addItem={addItemCb}\n          renderers={renderers}\n        />\n      </Hidden>\n    );\n  };\n\nexport default { tester: rankWith(5, isObjectArrayWithNesting), renderer: withJsonFormsArrayLayoutProps(MyMaterialArrayLayoutRenderer)};\n","const fallbackCopyTextToClipboard = function(text: string) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  textArea.style.position=\"fixed\";  //avoid scrolling to bottom\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n};\nexport function copyTextToClipboard(text: string) {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(function() {\n    console.log('Async: Copying to clipboard was successful!');\n  }, function(err) {\n    console.error('Async: Could not copy text: ', err);\n  });\n}","import * as yaml from \"js-yaml\";\nimport {DumpOptions} from \"js-yaml\";\n\nconst yamlDumpOption: DumpOptions = {\n  noArrayIndent: true,\n};\nexport function toYaml(data: any) {\n  return yaml.dump(data, yamlDumpOption)\n}\nexport function fromYaml(str: string) {\n  return yaml.load(str);\n}\n","import * as $ from \"jquery\"\nexport function viewToPost(display: any): any {\n  let data = JSON.parse(JSON.stringify(display));\n  data.trace.forEach((tr: any) => {\n    let headers = tr.headers;\n    let queries = tr.queries;\n    delete tr.headers;\n    delete tr.queries;\n    if (headers) {\n      var res = arrayToObj(headers);\n      if (res) {\n        tr.headers = res;\n      }\n    }\n    if (queries) {\n      var res = arrayToObj(queries);\n      if (res) {\n        tr.queries = res;\n      }\n    }\n  });\n  delete data.validate;\n  return data;\n}\n\nexport function postToView(obj: any) {\n  if (obj.trace.filter((tr: any) => tr.headers || tr.queries).length > 0) {\n    let newObj = JSON.parse(JSON.stringify(obj));\n    newObj.trace.forEach((tr: any) => {\n      tr.headers = objToArray(tr.headers);\n      tr.queries = objToArray(tr.queries);\n    });\n    return newObj;\n  } else {\n    return obj;\n  }\n}\n\nfunction objToArray(obj: any) {\n  if (obj === undefined) {\n    return undefined;\n  }\n  let result = [];\n  for (let k in obj) {\n    result.push({name: k, value: obj[k]});\n  }\n  return result.length > 0 ? result : undefined;\n}\n\nfunction arrayToObj(kvs: Array<{name: string, value: string}>) {\n  let result: any = {};\n  kvs.forEach(h => {\n    if (h.name && h.value && h.value.length > 0) {\n      result[h.name] = h.value;\n    }\n  });\n  for (let k in result) {\n    return result;\n  }\n  return undefined;\n}\n\nexport function executeCase(json: any, params: string | undefined, setResult: (_: string) => void) {\n  var url = '/e';\n  if (params) {\n    url = url + \"?\" + params\n  }\n  $.ajax({\n    method: \"POST\",\n    url: scopedUri(url),\n    dataType: 'text',\n    data: JSON.stringify(json),\n    contentType: 'application/json',\n    success: data1 => {\n      setResult(data1)\n    },\n    error: jqXHR => {\n      setResult(jqXHR.responseText)\n    }\n  });\n}\n\nfunction getQueryValue(key: string): string | undefined {\n  const query = window.location.search.substring(1);\n  const vars = query.split(\"&\");\n  for (let i=0; i<vars.length; i++) {\n    const pair = vars[i].split(\"=\");\n    if(pair[0] == key) {\n      return pair[1]\n    }\n  }\n  return undefined\n}\n\n\nexport function scopedUri(uri: string): string{\n  const scope = getQueryValue(\"scope\")\n  if (scope == undefined) {\n    return uri\n  } else {\n    const splitter = uri.indexOf('?') == -1 ? '?' : '&'\n    return uri + splitter + 'scope=' + scope\n  }\n}\n","import {copyTextToClipboard} from \"./clipboard\";\nimport {Divider, IconButton, InputBase, Paper} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport React, {useState} from \"react\";\nimport {fromYaml, toYaml} from \"./yaml\";\nimport {viewToPost} from \"./data\";\n\nexport interface SaveToolsProps {\n  displayData: any,\n  setDisplayString: (value: (string)) => void\n}\nexport default ({ displayData, setDisplayString }: SaveToolsProps) => {\n  const cacheKey = \"powerful-cases\";\n  const [saveName, setSaveName] = useState(\"\");\n  console.log(displayData);\n\n  function saveToCache(name: string) {\n    if (!name || name === '') {\n      return;\n    }\n    var cache = localStorage.getItem(cacheKey);\n    var data: any = cache == null ? {cases: {}} : fromYaml(cache);\n    data.cases[name] = viewToPost(displayData);\n    localStorage.setItem(cacheKey, toYaml(data));\n    showCache();\n  }\n\n  function showCache() {\n    var str = localStorage.getItem(cacheKey);\n    setDisplayString(str == null ? \"\" : str);\n  }\n\n  function copyToClipboard() {\n    var data = localStorage.getItem(cacheKey);\n    if (data != null) {\n      copyTextToClipboard(data);\n    }\n    setDisplayString(\"Successfully copied to clipboard.\");\n  }\n\n  function clearCache() {\n    localStorage.removeItem(cacheKey);\n    showCache();\n  }\n\n  return <Paper component=\"form\" style={{padding: '2px 4px', display: 'flex', alignItems: 'center'}}>\n    <InputBase\n      style={{padding: \"10px\"}}\n      placeholder=\"Add As Name...\"\n      value={saveName}\n      onChange={e => setSaveName(e.target.value)}\n    />\n    <IconButton onClick={() => saveToCache(saveName)}>\n      <SaveIcon/>\n    </IconButton>\n    <Divider orientation=\"vertical\"/>\n    <IconButton onClick={() => showCache()}>\n      <VisibilityIcon/>\n    </IconButton>\n    <Divider orientation=\"vertical\"/>\n    <IconButton onClick={() => copyToClipboard()}>\n      <FileCopyIcon/>\n    </IconButton>\n    <Divider orientation=\"vertical\"/>\n    <IconButton onClick={() => clearCache()}>\n      <ClearIcon/>\n    </IconButton>\n  </Paper>;\n}\n","import React, {Fragment, useEffect, useState} from 'react';\nimport {JsonForms} from '@jsonforms/react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles, {WithStyles} from '@material-ui/core/styles/withStyles';\nimport createStyles from '@material-ui/core/styles/createStyles';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport {materialCells, materialRenderers} from '@jsonforms/material-renderers';\nimport {Store} from 'redux';\nimport {get} from 'lodash';\nimport MyArrayLayout from \"./MyArrayLayout\";\nimport * as $ from \"jquery\"\nimport {ListItemText, TextField} from \"@material-ui/core\";\nimport SaveTools from \"./SaveTools\";\nimport {fromYaml, toYaml} from './yaml';\nimport {executeCase, postToView, scopedUri, viewToPost} from './data';\n\nconst styles = createStyles({\n  container: {\n    padding: '1em'\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em'\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    padding: '10px',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece'\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem'\n  }\n});\n\nexport interface AppProps extends WithStyles<typeof styles> {\n  store: Store;\n}\n\nconst getDataAsStringFromStore = (store: Store) =>\n  store\n    ? JSON.stringify(\n        get(store.getState(), ['jsonforms', 'core', 'data']),\n        null,\n        2\n      )\n    : '';\n\nvar init = false;\n\nconst App = ({ store, classes }: AppProps) => {\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [displayData, setDisplayData] = useState<any>({ trace: [{}] });\n  const [consoleData, setConsoleData] = useState('');\n  const [cases, setCases] = useState([{\"group\": \"grp1\", \"cases\": [\"a\", \"b\"]}]);\n  const [yamlStr, setYamlStr] = useState(\"\");\n  const [yamlTextFocused, setYamlTextFocused] = useState(false);\n\n  if (!init) {\n    $.ajax({\n      url: scopedUri('/caseList'),\n      success: data1 => {\n        console.log(data1)\n        setCases(data1)\n      }\n    });\n    init = true;\n  }\n  useEffect(() => {\n    const updateStringData = () => {\n      const stringData = getDataAsStringFromStore(store);\n      setDisplayDataAsString(stringData);\n    };\n    store.subscribe(updateStringData);\n    updateStringData();\n  }, [store]);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(displayData, null, 2));\n  }, [displayData]);\n\n  useEffect(() => {\n    if (!yamlTextFocused) {\n      setYamlStr(toYaml(viewToPost(displayData)))\n    }\n  }, [displayData]);\n\n  function getCase(name: string) {\n    $.ajax({\n      method: \"Post\",\n      url: scopedUri(\"/c/\" + name),\n      success: data1 => {\n        var data = JSON.parse(data1);\n        console.log(data);\n        setDisplayData(postToView(data))\n      }\n    })\n  }\n\n  function submit(setResult: (_: string) => void) {\n    setResult(\"loading...\");\n    window.console.log(yamlStr);\n    var json = fromYaml(yamlStr);\n\n    executeCase(json, displayData.expect ? \"validate=true\" : undefined, setResult);\n  }\n  function editYaml(content: string) {\n    setYamlStr(content);\n    try {\n      var obj = fromYaml(content);\n      if (obj) {\n        var nul = obj.trace.indexOf(null);\n        if (nul === -1) {\n          setDisplayData(postToView(obj));\n        } else {\n          obj.trace[nul] = {}\n        }\n      }\n    } catch {\n\n    }\n  }\n\n  return (\n    <Fragment>\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={2}>\n          <Typography variant=\"h6\" className={classes.title}>\n            Cases\n          </Typography>\n          <List dense={true}>\n            {cases.map((grp: any) => (\n              <div>\n                <ListItem className={\"listItem\"} button>\n                  <ListItemText primary={grp.group} />\n                </ListItem>\n                {grp.cases.map((c: string) => (\n                  <ListItem button className={\"subListItem\"} onClick={event => getCase(c)}>\n                    <ListItemText className={\"subListItemText\"} primary={c} />\n                  </ListItem>\n                ))}\n              </div>\n            ))}\n          </List>\n        </Grid>\n        <Grid item sm={5}>\n          <Grid\n            container\n            justify={'flex-end'}\n            spacing={1}\n            className={classes.container}\n          >\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => submit(setConsoleData)}\n            >Submit</Button>\n          </Grid>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={displayData}\n              renderers={[\n                ...materialRenderers,\n                //register custom renderer\n                MyArrayLayout\n              ]}\n              cells={materialCells}\n              onChange={({errors, data}) => {\n                if (data.traceNodeTmpl === '') {\n                  delete data.traceNodeTmpl;\n                }\n                setDisplayData(data)\n              }}\n            />\n          </div>\n          <Grid\n            container\n            justify={'flex-end'}\n            spacing={1}\n            className={classes.container}\n          >\n            <SaveTools\n              displayData={displayData}\n              setDisplayString={setConsoleData}\n            />\n          </Grid>\n        </Grid>\n        <Grid item sm={5}>\n          <Typography variant={'h6'} className={classes.title}>\n            Edit as yaml\n          </Typography>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"Multiline\"\n            multiline\n            rows=\"10\"\n            value={yamlStr}\n            onChange={event => editYaml(event.target.value)}\n            onFocus={event => setYamlTextFocused(true)}\n            onBlur={event => setYamlTextFocused(false)}\n            variant=\"outlined\"\n            fullWidth\n          />\n          <p/>\n          <div className={classes.dataContent}>\n            <pre id='resultData'>{consoleData}</pre>\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker, {unregister} from './registerServiceWorker';\nimport { combineReducers, createStore, Reducer, AnyAction } from 'redux';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { Actions, jsonformsReducer, JsonFormsState } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers\n} from '@jsonforms/material-renderers';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\n// Setup Redux store\nconst data = {\n  name: 'Send email to Adrian',\n  description: 'Confirm if you have passed the subject\\nHereby ...',\n  done: true,\n  recurrence: 'Daily',\n  rating: 3\n};\n\nconst initState: JsonFormsState = {\n  jsonforms: {\n    cells: materialCells,\n    renderers: materialRenderers\n  }\n};\n\nconst rootReducer: Reducer<JsonFormsState, AnyAction> = combineReducers({\n  jsonforms: jsonformsReducer()\n});\nconst store = createStore(rootReducer, initState, devToolsEnhancer({}));\nstore.dispatch(Actions.init(data, schema, uischema));\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\nunregister()\n"],"sourceRoot":""}