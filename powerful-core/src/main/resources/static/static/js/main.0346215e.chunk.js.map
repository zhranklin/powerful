{"version":3,"sources":["MyArrayLayout.tsx","clipboard.ts","yaml.ts","data.ts","SaveTools.tsx","App.tsx","registerServiceWorker.js","index.tsx"],"names":["MyMaterialArrayLayout","isExpanded","index","MaterialArrayLayout","tester","rankWith","isObjectArrayWithNesting","renderer","withJsonFormsArrayLayoutProps","visible","enabled","id","uischema","schema","label","rootSchema","renderers","data","path","errors","addItem","addItemCb","useCallback","p","value","Hidden","xsUp","fallbackCopyTextToClipboard","text","textArea","document","createElement","style","position","body","appendChild","focus","select","msg","execCommand","console","log","err","error","removeChild","yamlDumpOption","noArrayIndent","toYaml","yaml","fromYaml","str","viewToPost","display","JSON","parse","stringify","trace","forEach","tr","res","headers","queries","arrayToObj","objToArray","obj","undefined","result","k","push","name","length","kvs","h","displayData","setDisplayString","cacheKey","useState","saveName","setSaveName","showCache","localStorage","getItem","copyToClipboard","navigator","clipboard","writeText","then","Paper","component","padding","alignItems","InputBase","placeholder","onChange","e","target","IconButton","onClick","cache","cases","setItem","saveToCache","Divider","orientation","removeItem","styles","createStyles","container","title","textAlign","dataContent","justifyContent","borderRadius","backgroundColor","demoform","margin","init","withStyles","store","classes","setDisplayDataAsString","setDisplayData","consoleData","setConsoleData","setCases","yamlStr","setYamlStr","yamlTextFocused","setYamlTextFocused","submit","setResult","window","json","url","$","method","dataType","contentType","success","data1","jqXHR","responseText","executeCase","editYaml","content","nul","indexOf","filter","newObj","postToView","useEffect","updateStringData","stringData","get","getState","getDataAsStringFromStore","subscribe","Grid","justify","spacing","className","item","sm","Typography","variant","List","dense","map","i","ListItem","button","event","ListItemText","primary","Button","color","materialRenderers","MyArrayLayout","cells","materialCells","traceNodeTmpl","SaveTools","TextField","multiline","rows","onFocus","onBlur","fullWidth","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","initState","jsonforms","rootReducer","combineReducers","jsonformsReducer","createStore","devToolsEnhancer","dispatch","Actions","description","done","recurrence","rating","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0346215e.chunk.js","sourcesContent":["import * as React from 'react';\nimport {useCallback} from 'react';\n\n\nimport {ArrayLayoutProps, isObjectArrayWithNesting, rankWith,} from '@jsonforms/core';\nimport {Hidden} from '@material-ui/core';\nimport {withJsonFormsArrayLayoutProps} from '@jsonforms/react';\nimport {MaterialArrayLayout} from \"@jsonforms/material-renderers/lib/layouts/MaterialArrayLayout\";\n\n\nexport class MyMaterialArrayLayout extends MaterialArrayLayout {\n  isExpanded = (index: number) => true;\n}\n\nexport const MyMaterialArrayLayoutRenderer =\n  ({ visible, enabled, id, uischema, schema, label, rootSchema, renderers, data, path, errors, addItem }: ArrayLayoutProps) => {\n    const addItemCb = useCallback((p: string, value: any) => addItem(p, value), [addItem]);\n    return (\n      <Hidden xsUp={!visible}>\n        <MyMaterialArrayLayout\n          label={label}\n          uischema={uischema}\n          schema={schema}\n          id={id}\n          rootSchema={rootSchema}\n          errors={errors}\n          enabled={enabled}\n          visible={visible}\n          data={data}\n          path={path}\n          addItem={addItemCb}\n          renderers={renderers}\n        />\n      </Hidden>\n    );\n  };\n\nexport default { tester: rankWith(5, isObjectArrayWithNesting), renderer: withJsonFormsArrayLayoutProps(MyMaterialArrayLayoutRenderer)};\n","const fallbackCopyTextToClipboard = function(text: string) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n  textArea.style.position=\"fixed\";  //avoid scrolling to bottom\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand('copy');\n    var msg = successful ? 'successful' : 'unsuccessful';\n    console.log('Fallback: Copying text command was ' + msg);\n  } catch (err) {\n    console.error('Fallback: Oops, unable to copy', err);\n  }\n\n  document.body.removeChild(textArea);\n};\nexport function copyTextToClipboard(text: string) {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(function() {\n    console.log('Async: Copying to clipboard was successful!');\n  }, function(err) {\n    console.error('Async: Could not copy text: ', err);\n  });\n}","import * as yaml from \"js-yaml\";\nimport {DumpOptions} from \"js-yaml\";\n\nconst yamlDumpOption: DumpOptions = {\n  noArrayIndent: true,\n};\nexport function toYaml(data: any) {\n  return yaml.dump(data, yamlDumpOption)\n}\nexport function fromYaml(str: string) {\n  return yaml.load(str);\n}\n","import * as $ from \"jquery\"\nexport function viewToPost(display: any): any {\n  let data = JSON.parse(JSON.stringify(display));\n  data.trace.forEach((tr: any) => {\n    let headers = tr.headers;\n    let queries = tr.queries;\n    delete tr.headers;\n    delete tr.queries;\n    if (headers) {\n      var res = arrayToObj(headers);\n      if (res) {\n        tr.headers = res;\n      }\n    }\n    if (queries) {\n      var res = arrayToObj(queries);\n      if (res) {\n        tr.queries = res;\n      }\n    }\n  });\n  return data;\n}\n\nexport function postToView(obj: any) {\n  if (obj.trace.filter((tr: any) => tr.headers || tr.queries).length > 0) {\n    let newObj = JSON.parse(JSON.stringify(obj));\n    newObj.trace.forEach((tr: any) => {\n      tr.headers = objToArray(tr.headers);\n      tr.queries = objToArray(tr.queries);\n    });\n    return newObj;\n  } else {\n    return obj;\n  }\n}\n\nfunction objToArray(obj: any) {\n  if (obj === undefined) {\n    return undefined;\n  }\n  let result = [];\n  for (let k in obj) {\n    result.push({name: k, value: obj[k]});\n  }\n  return result.length > 0 ? result : undefined;\n}\n\nfunction arrayToObj(kvs: Array<{name: string, value: string}>) {\n  let result: any = {};\n  kvs.forEach(h => {\n    if (h.name && h.value && h.value.length > 0) {\n      result[h.name] = h.value;\n    }\n  });\n  for (let k in result) {\n    return result;\n  }\n  return undefined;\n}\n\nexport function executeCase(json: any, setResult: (_: string) => void) {\n  var url = '/e';\n  var params = \"validate=true\";\n  if (params) {\n    url = url + \"?\" + params\n  }\n  $.ajax({\n    method: \"POST\",\n    url: url,\n    dataType: 'text',\n    data: JSON.stringify(json),\n    contentType: 'application/json',\n    success: data1 => {\n      setResult(data1)\n    },\n    error: jqXHR => {\n      setResult(jqXHR.responseText)\n    }\n  });\n}\n","import {copyTextToClipboard} from \"./clipboard\";\nimport {Divider, IconButton, InputBase, Paper} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport React, {useState} from \"react\";\nimport {fromYaml, toYaml} from \"./yaml\";\nimport {viewToPost} from \"./data\";\n\nexport interface SaveToolsProps {\n  displayData: any,\n  setDisplayString: (value: (string)) => void\n}\nexport default ({ displayData, setDisplayString }: SaveToolsProps) => {\n  const cacheKey = \"powerful-cases\";\n  const [saveName, setSaveName] = useState(\"\");\n  console.log(displayData);\n\n  function saveToCache(name: string) {\n    if (!name || name === '') {\n      return;\n    }\n    var cache = localStorage.getItem(cacheKey);\n    var data: any = cache == null ? {cases: {}} : fromYaml(cache);\n    data.cases[name] = viewToPost(displayData);\n    localStorage.setItem(cacheKey, toYaml(data));\n    showCache();\n  }\n\n  function showCache() {\n    var str = localStorage.getItem(cacheKey);\n    setDisplayString(str == null ? \"\" : str);\n  }\n\n  function copyToClipboard() {\n    var data = localStorage.getItem(cacheKey);\n    if (data != null) {\n      copyTextToClipboard(data);\n    }\n    setDisplayString(\"Successfully copied to clipboard.\");\n  }\n\n  function clearCache() {\n    localStorage.removeItem(cacheKey);\n    showCache();\n  }\n\n  return <Paper component=\"form\" style={{padding: '2px 4px', display: 'flex', alignItems: 'center'}}>\n    <InputBase\n      style={{padding: \"10px\"}}\n      placeholder=\"Add As Name...\"\n      value={saveName}\n      onChange={e => setSaveName(e.target.value)}\n    />\n    <IconButton onClick={() => saveToCache(saveName)}>\n      <SaveIcon/>\n    </IconButton>\n    <Divider orientation=\"vertical\"/>\n    <IconButton onClick={() => showCache()}>\n      <VisibilityIcon/>\n    </IconButton>\n    <Divider orientation=\"vertical\"/>\n    <IconButton onClick={() => copyToClipboard()}>\n      <FileCopyIcon/>\n    </IconButton>\n    <Divider orientation=\"vertical\"/>\n    <IconButton onClick={() => clearCache()}>\n      <ClearIcon/>\n    </IconButton>\n  </Paper>;\n}\n","import React, {Fragment, useEffect, useState} from 'react';\nimport {JsonForms} from '@jsonforms/react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles, {WithStyles} from '@material-ui/core/styles/withStyles';\nimport createStyles from '@material-ui/core/styles/createStyles';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport {materialCells, materialRenderers} from '@jsonforms/material-renderers';\nimport {Store} from 'redux';\nimport {get} from 'lodash';\nimport MyArrayLayout from \"./MyArrayLayout\";\nimport * as $ from \"jquery\"\nimport {ListItemText, TextField} from \"@material-ui/core\";\nimport SaveTools from \"./SaveTools\";\nimport {fromYaml, toYaml} from './yaml';\nimport {executeCase, postToView, viewToPost} from './data';\n\nconst styles = createStyles({\n  container: {\n    padding: '1em'\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em'\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    padding: '10px',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece'\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem'\n  }\n});\n\nexport interface AppProps extends WithStyles<typeof styles> {\n  store: Store;\n}\n\nconst getDataAsStringFromStore = (store: Store) =>\n  store\n    ? JSON.stringify(\n        get(store.getState(), ['jsonforms', 'core', 'data']),\n        null,\n        2\n      )\n    : '';\n\nvar init = false;\n\nconst App = ({ store, classes }: AppProps) => {\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [displayData, setDisplayData] = useState({ trace: [{}] });\n  const [consoleData, setConsoleData] = useState('');\n  const [cases, setCases] = useState([\"1\", \"2\"]);\n  const [yamlStr, setYamlStr] = useState(\"\");\n  const [yamlTextFocused, setYamlTextFocused] = useState(false);\n\n  if (!init) {\n    $.ajax({\n      url: '/c',\n      success: data1 => {\n        setCases(data1)\n      }\n    });\n    init = true;\n  }\n  useEffect(() => {\n    const updateStringData = () => {\n      const stringData = getDataAsStringFromStore(store);\n      setDisplayDataAsString(stringData);\n    };\n    store.subscribe(updateStringData);\n    updateStringData();\n  }, [store]);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(displayData, null, 2));\n  }, [displayData]);\n\n  useEffect(() => {\n    if (!yamlTextFocused) {\n      setYamlStr(toYaml(viewToPost(displayData)))\n    }\n  }, [displayData]);\n\n  function getCase(name: string) {\n    $.ajax({\n      method: \"Post\",\n      url: \"/c/\" + name,\n      success: data1 => {\n        var data = JSON.parse(data1);\n        console.log(data);\n        setDisplayData(data)\n      }\n    })\n  }\n\n  function submit(setResult: (_: string) => void) {\n    setResult(\"loading...\");\n    window.console.log(yamlStr);\n    var json = fromYaml(yamlStr);\n\n    executeCase(json, setResult);\n  }\n  function editYaml(content: string) {\n    setYamlStr(content);\n    try {\n      var obj = fromYaml(content);\n      if (obj) {\n        var nul = obj.trace.indexOf(null);\n        if (nul === -1) {\n          setDisplayData(postToView(obj));\n        } else {\n          obj.trace[nul] = {}\n        }\n      }\n    } catch {\n\n    }\n  }\n\n  return (\n    <Fragment>\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={2}>\n          <Typography variant=\"h6\" className={classes.title}>\n            Cases\n          </Typography>\n          <List dense={true}>\n            {cases.map(i => (\n              <ListItem button onClick={event => getCase(i)}>\n                <ListItemText primary={i}/>\n              </ListItem>\n            ))}\n          </List>\n        </Grid>\n        <Grid item sm={5}>\n          <Grid\n            container\n            justify={'flex-end'}\n            spacing={1}\n            className={classes.container}\n          >\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => submit(setConsoleData)}\n            >Submit</Button>\n          </Grid>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={displayData}\n              renderers={[\n                ...materialRenderers,\n                //register custom renderer\n                MyArrayLayout\n              ]}\n              cells={materialCells}\n              onChange={({errors, data}) => {\n                if (data.traceNodeTmpl === '') {\n                  delete data.traceNodeTmpl;\n                }\n                setDisplayData(data)\n              }}\n            />\n          </div>\n          <Grid\n            container\n            justify={'flex-end'}\n            spacing={1}\n            className={classes.container}\n          >\n            <SaveTools\n              displayData={displayData}\n              setDisplayString={setConsoleData}\n            />\n          </Grid>\n        </Grid>\n        <Grid item sm={5}>\n          <Typography variant={'h6'} className={classes.title}>\n            Edit as yaml\n          </Typography>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"Multiline\"\n            multiline\n            rows=\"10\"\n            value={yamlStr}\n            onChange={event => editYaml(event.target.value)}\n            onFocus={event => setYamlTextFocused(true)}\n            onBlur={event => setYamlTextFocused(false)}\n            variant=\"outlined\"\n            fullWidth\n          />\n          <p/>\n          <div className={classes.dataContent}>\n            <pre id='resultData'>{consoleData}</pre>\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { combineReducers, createStore, Reducer, AnyAction } from 'redux';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { Actions, jsonformsReducer, JsonFormsState } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers\n} from '@jsonforms/material-renderers';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\n// Setup Redux store\nconst data = {\n  name: 'Send email to Adrian',\n  description: 'Confirm if you have passed the subject\\nHereby ...',\n  done: true,\n  recurrence: 'Daily',\n  rating: 3\n};\n\nconst initState: JsonFormsState = {\n  jsonforms: {\n    cells: materialCells,\n    renderers: materialRenderers\n  }\n};\n\nconst rootReducer: Reducer<JsonFormsState, AnyAction> = combineReducers({\n  jsonforms: jsonformsReducer()\n});\nconst store = createStore(rootReducer, initState, devToolsEnhancer({}));\nstore.dispatch(Actions.init(data, schema, uischema));\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}